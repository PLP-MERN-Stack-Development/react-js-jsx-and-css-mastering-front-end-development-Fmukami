import os

import zipfile



# Define project structure

base_dir = "/mnt/data/react-tailwind-week3"

src_dirs = [

    "src/components",

    "src/pages",

    "src/context",

    "src/hooks",

    "src/api"

]



# Create directories

for d in src_dirs:

    os.makedirs(os.path.join(base_dir, d), exist_ok=True)



# Helper to write file content

def write(path, content):

    with open(os.path.join(base_dir, path), "w") as f:

        f.write(content.strip() + "\n")



# Write all files

write("package.json", """{

  "name": "react-tailwind-week3",

  "version": "1.0.0",

  "private": true,

  "scripts": {

    "dev": "vite",

    "build": "vite build",

    "preview": "vite preview"

  },

  "dependencies": {

    "react": "^18.2.0",

    "react-dom": "^18.2.0",

    "react-router-dom": "^6.14.0"

  },

  "devDependencies": {

    "autoprefixer": "^10.4.14",

    "postcss": "^8.4.24",

    "tailwindcss": "^3.5.2",

    "vite": "^5.0.0"

  }

}""")



write("vite.config.js", """import { defineConfig } from 'vite'

import react from '@vitejs/plugin-react'



export default defineConfig({

  plugins: [react()],

})

""")



write("tailwind.config.cjs", """module.exports = {

  content: ['./index.html', './src/**/*.{js,jsx}'],

  darkMode: 'class',

  theme: { extend: {} },

  plugins: [],

}

""")



write("postcss.config.cjs", """module.exports = {

  plugins: {

    tailwindcss: {},

    autoprefixer: {},

  },

}

""")



write("index.html", """<!doctype html>

<html>

  <head>

    <meta charset="utf-8" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

    <title>Week 3 - React + Tailwind</title>

  </head>

  <body>

    <div id="root"></div>

    <script type="module" src="/src/main.jsx"></script>

  </body>

</html>

""")



write("src/index.css", """@tailwind base;

@tailwind components;

@tailwind utilities;

.fade { transition: opacity 200ms ease; }

""")



write("src/main.jsx", """import React from 'react'

import { createRoot } from 'react-dom/client'

import { BrowserRouter } from 'react-router-dom'

import App from './App'

import './index.css'

import { ThemeProvider } from './context/ThemeContext'



createRoot(document.getElementById('root')).render(

  <React.StrictMode>

    <ThemeProvider>

      <BrowserRouter>

        <App />

      </BrowserRouter>

    </ThemeProvider>

  </React.StrictMode>

)

""")



write("src/App.jsx", """import React from 'react'

import { Routes, Route } from 'react-router-dom'

import Layout from './components/Layout'

import TaskManager from './pages/TaskManager'

import ApiList from './pages/ApiList'



export default function App() {

  return (

    <Routes>

      <Route element={<Layout />}>

        <Route index element={<TaskManager />} />

        <Route path="/api" element={<ApiList />} />

      </Route>

    </Routes>

  )

}

""")



write("src/context/ThemeContext.jsx", """import React, { createContext, useContext, useState, useEffect } from 'react'

import useLocalStorage from '../hooks/useLocalStorage'



const ThemeContext = createContext()



export const ThemeProvider = ({ children }) => {

  const [stored, setStored] = useLocalStorage('theme', 'light')

  const [theme, setTheme] = useState(stored)



  useEffect(() => {

    const root = document.documentElement

    if (theme === 'dark') root.classList.add('dark')

    else root.classList.remove('dark')

    setStored(theme)

  }, [theme, setStored])



  const toggle = () => setTheme(prev => (prev === 'dark' ? 'light' : 'dark'))



  return (

    <ThemeContext.Provider value={{ theme, toggle }}>

      {children}

    </ThemeContext.Provider>

  )

}



export const useTheme = () => useContext(ThemeContext)

""")



write("src/hooks/useLocalStorage.js", """import { useState, useEffect } from 'react'



export default function useLocalStorage(key, initialValue) {

  const [state, setState] = useState(() => {

    try {

      const item = localStorage.getItem(key)

      return item ? JSON.parse(item) : initialValue

    } catch {

      return initialValue

    }

  })



  useEffect(() => {

    try {

      localStorage.setItem(key, JSON.stringify(state))

    } catch {}

  }, [key, state])



  return [state, setState]

}

""")



write("src/components/Button.jsx", """import React from 'react'



export default function Button({ children, variant = 'primary', onClick, className = '', ...props }) {

  const base = 'px-4 py-2 rounded-md font-medium focus:outline-none transition-shadow'

  const variants = {

    primary: 'bg-blue-600 text-white hover:shadow-md dark:bg-blue-500',

    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-100',

    danger: 'bg-red-600 text-white hover:bg-red-700'

  }

  return (

    <button

      className={`${base} ${variants[variant]} ${className}`}

      onClick={onClick}

      {...props}

    >

      {children}

    </button>

  )

}

""")



write("src/components/Card.jsx", """import React from 'react'

export default function Card({ children, className = '' }) {

  return (

    <div className={`bg-white dark:bg-gray-800 shadow-md rounded-lg p-4 ${className}`}>

      {children}

    </div>

  )

}

""")



write("src/components/Navbar.jsx", """import React from 'react'

import { Link, useLocation } from 'react-router-dom'

import { useTheme } from '../context/ThemeContext'

import Button from './Button'



export default function Navbar() {

  const { toggle, theme } = useTheme()

  const loc = useLocation()



  return (

    <nav className="w-full border-b bg-white dark:bg-gray-900 dark:border-gray-700">

      <div className="max-w-4xl mx-auto flex items-center justify-between p-4">

        <div className="flex items-center gap-4">

          <Link to="/" className="font-bold text-lg">Week3App</Link>

          <Link to="/" className={`text-sm ${loc.pathname === '/' ? 'underline' : ''}`}>Tasks</Link>

          <Link to="/api" className={`text-sm ${loc.pathname === '/api' ? 'underline' : ''}`}>API</Link>

        </div>

        <Button variant="secondary" onClick={toggle}>

          {theme === 'dark' ? 'Light' : 'Dark'}

        </Button>

      </div>

    </nav>

  )

}

""")



write("src/components/Footer.jsx", """import React from 'react'

export default function Footer() {

  return (

    <footer className="w-full border-t mt-6 bg-white dark:bg-gray-900 dark:border-gray-700">

      <div className="max-w-4xl mx-auto p-4 text-sm text-center text-gray-600 dark:text-gray-300">

        © {new Date().getFullYear()} Week3 Assignment — Built with React & Tailwind

      </div>

    </footer>

  )

}

""")



write("src/components/Layout.jsx", """import React from 'react'

import { Outlet } from 'react-router-dom'

import Navbar from './Navbar'

import Footer from './Footer'



export default function Layout() {

  return (

    <div className="min-h-screen flex flex-col bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">

      <Navbar />

      <main className="flex-1 max-w-4xl w-full mx-auto p-4">

        <Outlet />

      </main>

      <Footer />

    </div>

  )

}

""")



write("src/pages/TaskManager.jsx", """import React, { useState, useEffect } from 'react'

import Card from '../components/Card'

import Button from '../components/Button'

import useLocalStorage from '../hooks/useLocalStorage'



function TaskItem({ task, onToggle, onDelete }) {

  return (

    <div className="flex items-center justify-between py-2">

      <div className="flex items-center gap-3">

        <input type="checkbox" checked={task.completed} onChange={() => onToggle(task.id)} />

        <div className={`${task.completed ? 'line-through text-gray-500' : ''}`}>{task.text}</div>

      </div>

      <Button variant="danger" onClick={() => onDelete(task.id)}>Delete</Button>

    </div>

  )

}



export default function TaskManager() {

  const [tasks, setTasks] = useLocalStorage('tasks', [])

  const [text, setText] = useState('')

  const [filter, setFilter] = useState('all')

  const [filtered, setFiltered] = useState(tasks)



  useEffect(() => {

    let res = tasks

    if (filter === 'active') res = tasks.filter(t => !t.completed)

    if (filter === 'completed') res = tasks.filter(t => t.completed)

    setFiltered(res)

  }, [tasks, filter])



  const addTask = () => {

    if (!text.trim()) return

    const newTask = { id: Date.now(), text: text.trim(), completed: false }

    setTasks([newTask, ...tasks])

    setText('')

  }



  const toggle = (id) => setTasks(tasks.map(t => t.id === id ? { ...t, completed: !t.completed } : t))

  const remove = (id) => setTasks(tasks.filter(t => t.id !== id))



  return (

    <div>

      <h1 className="text-2xl font-semibold mb-4">Task Manager</h1>

      <Card className="mb-4">

        <div className="flex gap-2">

          <input

            value={text}

            onChange={e => setText(e.target.value)}

            onKeyDown={e => e.key === 'Enter' && addTask()}

            className="flex-1 border px-3 py-2 rounded-md bg-gray-50 dark:bg-gray-800"

            placeholder="Add a new task..."

          />

          <Button onClick={addTask}>Add</Button>

        </div>

        <div className="mt-3 flex gap-2">

          <Button variant={filter==='all' ? 'primary' : 'secondary'} onClick={() => setFilter('all')}>All</Button>

          <Button variant={filter==='active' ? 'primary' : 'secondary'} onClick={() => setFilter('active')}>Active</Button>

          <Button variant={filter==='completed' ? 'primary' : 'secondary'} onClick={() => setFilter('completed')}>Completed</Button>

        </div>

      </Card>

      <Card>

        {filtered.length === 0 ? (

          <div className="text-sm text-gray-500">No tasks to show</div>

        ) : (

          filtered.map(task => <TaskItem key={task.id} task={task} onToggle={toggle} onDelete={remove} />)

        )}

      </Card>

    </div>

  )

}

""")



write("src/api/fetchPosts.js", """export async function fetchPosts({ page = 1, limit = 10, signal } = {}) {

  const start = (page - 1) * limit

  const res = await fetch(`https://jsonplaceholder.typicode.com/posts?_start=${start}&_limit=${limit}`, { signal })

  if (!res.ok) throw new Error('Network error')

  return await res.json()

}

""")



write("src/pages/ApiList.jsx", """import React, { useState, useEffect, useRef } from 'react'

import { fetchPosts } from '../api/fetchPosts'

import Card from '../components/Card'

import Button from '../components/Button'



export default function ApiList() {

  const [items, setItems] = useState([])

  const [page, setPage] = useState(1)

  const [loading, setLoading] = useState(false)

  const [error, setError] = useState(null)

  const [query, setQuery] = useState('')

  const controllerRef = useRef(null)

  const LIMIT = 10



  const load = async (p = 1) => {

    setLoading(true); setError(null)

    if (controllerRef.current) controllerRef.current.abort()

    controllerRef.current = new AbortController()

    try {

      const posts = await fetchPosts({ page: p, limit: LIMIT, signal: controllerRef.current.signal })

      if (p === 1) setItems(posts)

      else setItems(prev => [...prev, ...posts])

    } catch (err) {

      if (err.name !== 'AbortError') setError(err.message)

    } finally {

      setLoading(false)

    }

  }



  useEffect(() => { load(1); setPage(1) }, [])



  const loadMore = () => { setPage(p => p + 1); load(page + 1) }

  const filtered = items.filter(i =>

    i.title.toLowerCase().includes(query.toLowerCase()) ||

    i.body.toLowerCase().includes(query.toLowerCase())

  )



  return (

    <div>

      <h1 className="text-2xl font-semibold mb-4">Posts (JSONPlaceholder)</h1>

      <Card className="mb-4">

        <div className="flex gap-2">

          <input

            value={query}

            onChange={e => setQuery(e.target.value)}

            className="flex-1 border px-3 py-2 rounded-md"

            placeholder="Search posts..."

          />

          <Button onClick={() => setQuery('')}>Clear</Button>

        </div>

      </Card>

      <div className="space-y-3">

        {filtered.map(post => (

          <Card key={post.id}>

            <h3 className="font-semibold">{post.title}</h3>

            <p className="text-sm mt-1">{post.body}</p>

          </Card>

        ))}

      </div>

      <div className="flex justify-center mt-4">

        {error && <div className="text-red-500 mr-4">{error}</div>}

        <Button onClick={loadMore} disabled={loading}>{loading ? 'Loading...' : 'Load more'}</Button>

      </div>

    </div>

  )

}

""")



write("README.md", """# Week 3 - React + Tailwind Starter

## Setup
